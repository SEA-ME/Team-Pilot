/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_CAN_PROXY_HPP_
#define V1_COMMONAPI_CAN_PROXY_HPP_

#include <v1/commonapi/CANProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

template <typename ... _AttributeExtensions>
class CANProxy
    : virtual public CAN,
      virtual public CANProxyBase,
      virtual public _AttributeExtensions... {
public:
    CANProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CANProxy();

    typedef CAN InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls GetHUM with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetHUM(CAN::HUM _hum, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetHUM with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetHUMAsync(const CAN::HUM &_hum, GetHUMAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetTMP with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetTMP(CAN::TMP _tmp, CommonAPI::CallStatus &_internalCallStatus, int8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetTMP with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetTMPAsync(const CAN::TMP &_tmp, GetTMPAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetRPM with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetRPM(CAN::RPM _rpm, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_outArg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetRPM with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetRPMAsync(const CAN::RPM &_rpm, GetRPMAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetSPD with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetSPD(CAN::SPD _spd, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetSPD with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetSPDAsync(const CAN::SPD &_spd, GetSPDAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetBAT with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetBAT(CAN::BAT _bat, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetBAT with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetBATAsync(const CAN::BAT &_bat, GetBATAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);



 private:
    std::shared_ptr< CANProxyBase> delegate_;
};

typedef CANProxy<> CANProxyDefault;


//
// CANProxy Implementation
//
template <typename ... _AttributeExtensions>
CANProxy<_AttributeExtensions...>::CANProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< CANProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< CANProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CANProxy<_AttributeExtensions...>::~CANProxy() {
}

template <typename ... _AttributeExtensions>
void CANProxy<_AttributeExtensions...>::GetHUM(CAN::HUM _hum, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    delegate_->GetHUM(_hum, _internalCallStatus, _outArg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CANProxy<_AttributeExtensions...>::GetHUMAsync(const CAN::HUM &_hum, GetHUMAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetHUMAsync(_hum, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CANProxy<_AttributeExtensions...>::GetTMP(CAN::TMP _tmp, CommonAPI::CallStatus &_internalCallStatus, int8_t &_outArg, const CommonAPI::CallInfo *_info) {
    delegate_->GetTMP(_tmp, _internalCallStatus, _outArg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CANProxy<_AttributeExtensions...>::GetTMPAsync(const CAN::TMP &_tmp, GetTMPAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetTMPAsync(_tmp, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CANProxy<_AttributeExtensions...>::GetRPM(CAN::RPM _rpm, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_outArg, const CommonAPI::CallInfo *_info) {
    delegate_->GetRPM(_rpm, _internalCallStatus, _outArg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CANProxy<_AttributeExtensions...>::GetRPMAsync(const CAN::RPM &_rpm, GetRPMAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetRPMAsync(_rpm, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CANProxy<_AttributeExtensions...>::GetSPD(CAN::SPD _spd, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    delegate_->GetSPD(_spd, _internalCallStatus, _outArg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CANProxy<_AttributeExtensions...>::GetSPDAsync(const CAN::SPD &_spd, GetSPDAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetSPDAsync(_spd, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CANProxy<_AttributeExtensions...>::GetBAT(CAN::BAT _bat, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    delegate_->GetBAT(_bat, _internalCallStatus, _outArg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CANProxy<_AttributeExtensions...>::GetBATAsync(const CAN::BAT &_bat, GetBATAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetBATAsync(_bat, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CANProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CANProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CANProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CANProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CANProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> CANProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace commonapi
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_CAN_PROXY_HPP_
