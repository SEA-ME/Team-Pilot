/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_Dbus_Data_DBUS_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_Dbus_Data_DBUS_STUB_ADAPTER_HPP_

#include <v1/commonapi/DbusDataStub.hpp>
#include "v1/commonapi/DbusDataDBusDeployment.hpp"
#include <v1/commonapi/DbusDataDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

template <typename _Stub = ::v1::commonapi::DbusDataStub, typename... _Stubs>
class DbusDataDBusStubAdapterInternal
    : public virtual DbusDataStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> DbusDataDBusStubAdapterHelper;

    ~DbusDataDBusStubAdapterInternal() {
        deactivateManagedInstances();
        DbusDataDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return DbusData::getInterface();
    }

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::DbusDataStub,
        CommonAPI::Version
        > getDbusDataInterfaceVersionStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::commonapi::DbusDataStub,
        std::tuple< DbusData::dataStruct>,
        std::tuple< int32_t>,
        std::tuple< ::v1::commonapi::DbusData_::dataStructDeployment_t>,
        std::tuple< CommonAPI::DBus::IntegerDeployment>
    
        > structInMethodStubDispatcher;

    DbusDataDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      DbusDataDBusStubAdapterHelper(_address, _connection, false, _stub) {
        DbusDataDBusStubAdapterHelper::addStubDispatcher({ "structInMethod", "(iiiii)" }, &structInMethodStubDispatcher);
        DbusDataDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getDbusDataInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"structInMethod\">\n"
            "<arg name=\"_structParameter\" type=\"(iiiii)\" direction=\"in\" />\n"
            "<arg name=\"_output\" type=\"i\" direction=\"out\" />\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v1::commonapi::DbusDataStub,
    CommonAPI::Version
    > DbusDataDBusStubAdapterInternal<_Stub, _Stubs...>::getDbusDataInterfaceVersionStubDispatcher(&DbusDataStub::lockInterfaceVersionAttribute, &DbusDataStub::getInterfaceVersion, "uu");


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::commonapi::DbusDataStub,
    std::tuple< DbusData::dataStruct>,
    std::tuple< int32_t>,
    std::tuple< ::v1::commonapi::DbusData_::dataStructDeployment_t>,
    std::tuple< CommonAPI::DBus::IntegerDeployment>

    > DbusDataDBusStubAdapterInternal<_Stub, _Stubs...>::structInMethodStubDispatcher(
    &DbusDataStub::structInMethod, "i",
    std::make_tuple(static_cast< ::v1::commonapi::DbusData_::dataStructDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr)));


template <typename _Stub = ::v1::commonapi::DbusDataStub, typename... _Stubs>
class DbusDataDBusStubAdapter
    : public DbusDataDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< DbusDataDBusStubAdapter<_Stub, _Stubs...>> {
public:
    DbusDataDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          DbusDataDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_Dbus_Data_DBUS_STUB_ADAPTER_HPP_
