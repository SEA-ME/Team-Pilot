/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/DbusDataStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace commonapi {

DbusDataStubDefault::DbusDataStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(DbusData::getInterfaceVersion()) {
}

const CommonAPI::Version& DbusDataStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

DbusDataStubRemoteEvent* DbusDataStubDefault::initStubAdapter(const std::shared_ptr< DbusDataStubAdapter> &_adapter) {
    CommonAPI::Stub<DbusDataStubAdapter, DbusDataStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void DbusDataStubDefault::structInMethod(const std::shared_ptr<CommonAPI::ClientId> _client, DbusData::dataStruct _structParameter, structInMethodReply_t _reply) {
    (void)_client;
    (void)_structParameter;
    int32_t output = 0;
    _reply(output);
}




DbusDataStubDefault::RemoteEventHandler::RemoteEventHandler(DbusDataStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace commonapi
} // namespace v1
