/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/HeadUnitSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createHeadUnitSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< HeadUnitSomeIPProxy>(_address, _connection);
}

void initializeHeadUnitSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.HeadUnit:v1_0:headunit",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.HeadUnit:v1_0",
        &createHeadUnitSomeIPProxy);
}

INITIALIZER(registerHeadUnitSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeHeadUnitSomeIPProxy);
}

HeadUnitSomeIPProxy::HeadUnitSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection)
{
}

HeadUnitSomeIPProxy::~HeadUnitSomeIPProxy() {
    completed_.set_value();
}



void HeadUnitSomeIPProxy::GetHUM(HeadUnit::HUM _hum, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::HUM, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_hum(_hum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::HUM,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7b),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_hum,
        _internalCallStatus,
        deploy_outArg);
    _outArg = deploy_outArg.getValue();
}

std::future<CommonAPI::CallStatus> HeadUnitSomeIPProxy::GetHUMAsync(const HeadUnit::HUM &_hum, GetHUMAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::HUM, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_hum(_hum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::HUM,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7b),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_hum,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _outArg) {
            if (_callback)
                _callback(_internalCallStatus, _outArg.getValue());
        },
        std::make_tuple(deploy_outArg));
}

void HeadUnitSomeIPProxy::GetTMP(HeadUnit::TMP _tmp, CommonAPI::CallStatus &_internalCallStatus, int8_t &_outArg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::TMP, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_tmp(_tmp, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::TMP,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7c),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_tmp,
        _internalCallStatus,
        deploy_outArg);
    _outArg = deploy_outArg.getValue();
}

std::future<CommonAPI::CallStatus> HeadUnitSomeIPProxy::GetTMPAsync(const HeadUnit::TMP &_tmp, GetTMPAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::TMP, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_tmp(_tmp, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::TMP,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7c),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_tmp,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t> > _outArg) {
            if (_callback)
                _callback(_internalCallStatus, _outArg.getValue());
        },
        std::make_tuple(deploy_outArg));
}

void HeadUnitSomeIPProxy::GetRPM(HeadUnit::RPM _rpm, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_outArg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::RPM, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_rpm(_rpm, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::RPM,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7d),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_rpm,
        _internalCallStatus,
        deploy_outArg);
    _outArg = deploy_outArg.getValue();
}

std::future<CommonAPI::CallStatus> HeadUnitSomeIPProxy::GetRPMAsync(const HeadUnit::RPM &_rpm, GetRPMAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::RPM, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_rpm(_rpm, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::RPM,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7d),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_rpm,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > _outArg) {
            if (_callback)
                _callback(_internalCallStatus, _outArg.getValue());
        },
        std::make_tuple(deploy_outArg));
}

void HeadUnitSomeIPProxy::GetSPD(HeadUnit::SPD _spd, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::SPD, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_spd(_spd, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::SPD,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_spd,
        _internalCallStatus,
        deploy_outArg);
    _outArg = deploy_outArg.getValue();
}

std::future<CommonAPI::CallStatus> HeadUnitSomeIPProxy::GetSPDAsync(const HeadUnit::SPD &_spd, GetSPDAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::SPD, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_spd(_spd, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::SPD,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_spd,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _outArg) {
            if (_callback)
                _callback(_internalCallStatus, _outArg.getValue());
        },
        std::make_tuple(deploy_outArg));
}

void HeadUnitSomeIPProxy::GetBAT(HeadUnit::BAT _bat, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::BAT, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_bat(_bat, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::BAT,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7f),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_bat,
        _internalCallStatus,
        deploy_outArg);
    _outArg = deploy_outArg.getValue();
}

std::future<CommonAPI::CallStatus> HeadUnitSomeIPProxy::GetBATAsync(const HeadUnit::BAT &_bat, GetBATAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::BAT, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_bat(_bat, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::BAT,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7f),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_bat,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _outArg) {
            if (_callback)
                _callback(_internalCallStatus, _outArg.getValue());
        },
        std::make_tuple(deploy_outArg));
}

void HeadUnitSomeIPProxy::GetPRND(HeadUnit::PRND _prnd, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::PRND, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_prnd(_prnd, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::PRND,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x80),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_prnd,
        _internalCallStatus,
        deploy_outArg);
    _outArg = deploy_outArg.getValue();
}

std::future<CommonAPI::CallStatus> HeadUnitSomeIPProxy::GetPRNDAsync(const HeadUnit::PRND &_prnd, GetPRNDAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< HeadUnit::PRND, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_prnd(_prnd, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_outArg(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                HeadUnit::PRND,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x80),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_prnd,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _outArg) {
            if (_callback)
                _callback(_internalCallStatus, _outArg.getValue());
        },
        std::make_tuple(deploy_outArg));
}

void HeadUnitSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> HeadUnitSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace commonapi
} // namespace v1
