/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_Head_Unit_PROXY_BASE_HPP_
#define V1_COMMONAPI_Head_Unit_PROXY_BASE_HPP_

#include <v1/commonapi/HeadUnit.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <cstdint>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

class HeadUnitProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> GetHUMAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int8_t&)> GetTMPAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&)> GetRPMAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> GetSPDAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> GetBATAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> GetPRNDAsyncCallback;

    virtual void GetHUM(HeadUnit::HUM _hum, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetHUMAsync(const HeadUnit::HUM &_hum, GetHUMAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetTMP(HeadUnit::TMP _tmp, CommonAPI::CallStatus &_internalCallStatus, int8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetTMPAsync(const HeadUnit::TMP &_tmp, GetTMPAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetRPM(HeadUnit::RPM _rpm, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_outArg, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetRPMAsync(const HeadUnit::RPM &_rpm, GetRPMAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetSPD(HeadUnit::SPD _spd, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSPDAsync(const HeadUnit::SPD &_spd, GetSPDAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetBAT(HeadUnit::BAT _bat, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetBATAsync(const HeadUnit::BAT &_bat, GetBATAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetPRND(HeadUnit::PRND _prnd, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_outArg, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetPRNDAsync(const HeadUnit::PRND &_prnd, GetPRNDAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_Head_Unit_PROXY_BASE_HPP_
